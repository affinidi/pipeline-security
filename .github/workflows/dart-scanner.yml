name: Dart/Flutter Security Scan

on:
  workflow_call:
    inputs:
      repo-path:
        description: 'Path to the repository to scan'
        required: false
        default: '.'
        type: string
      flutter-version:
        description: 'Flutter SDK version'
        required: false
        default: 'stable'
        type: string

    secrets:
      SNYK_SCANNER_TOKEN:
        required: true
      SNYK_SCANNER_REGION:
        required: true

jobs:
  dart-scan:
    name: Dart Security Scanner
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect Project Type
        id: detect
        shell: bash
        run: |
          REPO_PATH="${{ inputs.repo-path }}"

          if [ ! -f "${REPO_PATH}/pubspec.yaml" ]; then
            echo "::warning::No pubspec.yaml found - not a Dart/Flutter project"
            echo "is_dart=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if grep -q "sdk: flutter" "${REPO_PATH}/pubspec.yaml" || grep -q "flutter:" "${REPO_PATH}/pubspec.yaml"; then
            echo "Project Type : Flutter"
            echo "is_flutter=true" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          else
            echo "Project Type : Dart"
            echo "is_flutter=false" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          fi

      - name: 🧰 Set up Flutter SDK
        if: steps.detect.outputs.is_dart == 'true'
        uses: flutter-actions/setup-flutter@v3
        with:
          version: ${{ inputs.flutter-version }}
          channel: stable
          cache: true
          cache-sdk: true

      - name: ⚡ Cache Global NPM Tools
        id: cache-npm
        if: steps.detect.outputs.is_dart == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-npm-tools-v1

      - name: 📦 Install required npm tools if not present
        if: steps.detect.outputs.is_dart == 'true'
        shell: bash
        run: |
          if ! command -v snyk > /dev/null || ! command -v cdxgen > /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix ~/.npm-global
            npm install -g snyk@latest @cyclonedx/cdxgen@latest
            echo "$HOME/.npm-global/bin" >> $GITHUB_PATH
          fi

      - name: 🔐 Authentication
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env:
          SNYK_SCANNER_TOKEN: ${{ secrets.SNYK_SCANNER_TOKEN }}
          SNYK_SCANNER_REGION: ${{ secrets.SNYK_SCANNER_REGION }}
        run: |
          echo "::add-mask::$SNYK_SCANNER_TOKEN"
          echo "::add-mask::$SNYK_SCANNER_REGION"

          snyk config set endpoint="https://api.${SNYK_SCANNER_REGION}.snyk.io" >/dev/null 2>&1
          snyk auth "$SNYK_SCANNER_TOKEN" >/dev/null 2>&1

      - name: 📦 Resolve dependencies
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          dart pub get

      - name: 🧪 Run SBOM Scan and Check Vulnerabilities
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          # 1. Generate and validate SBOM
          echo "Generating SBOM..."
          if ! cdxgen -t pub -o pub-sbom.json; then
            echo "::warning::⚠️ cdxgen exited with error — checking SBOM validity"
            if [ ! -s pub-sbom.json ]; then
              echo "::error::❌ SBOM generation failed completely"
              exit 1
            fi
          fi

          if ! jq empty pub-sbom.json; then
            echo "::error::❌ Invalid SBOM JSON"
            exit 1
          fi

          # 2. Run Snyk scan
          POLICY_PATH="${{ inputs.repo-path }}/.snyk"
          SNYK_COMMON_ARGS="--experimental --file pub-sbom.json --org=affinidi"

          echo "Running Snyk scan..."
          if [ -f "$POLICY_PATH" ]; then
            echo "Using .snyk policy file"
            snyk sbom test $SNYK_COMMON_ARGS --policy-path="$POLICY_PATH" --json > sbom-result.json || SNYK_EXIT=$?
          else
            echo "No .snyk policy file found"
            snyk sbom test $SNYK_COMMON_ARGS --json > sbom-result.json || SNYK_EXIT=$?
          fi

          # 3. Process results
          if [ -n "$SNYK_EXIT" ] && [ ! -f "sbom-result.json" ]; then
            echo "::error::❌ Snyk scan failed and no results file was generated"
            exit 1
          fi

          # 4. Extract counts 
          critical=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "critical")] | length' sbom-result.json | tr -d '[]')
          high=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "high")] | length' sbom-result.json | tr -d '[]')
          unknown=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "unknown")] | length' sbom-result.json | tr -d '[]')
          total=$(jq '[.vulnerabilities? // [] | length]' sbom-result.json | tr -d '[]')

          # 5. Display beautiful vulnerability summary
          echo "::group::📊 Security Scan Results"
          echo "┌───────────────────────┬─────────┐"
          echo "│ Vulnerability Severity │ Count   │"
          echo "├───────────────────────┼─────────┤"
          printf "│ ${PURPLE}Critical${NC}            │ %-7s │\n" "$critical"
          printf "│ ${RED}High${NC}                │ %-7s │\n" "$high"
          echo "│ Medium                │ $(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "medium")] | length' sbom-result.json | tr -d '[]') │"
          echo "│ Low                   │ $(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "low")] | length' sbom-result.json | tr -d '[]') │"
          echo "│ Unknown               │ $unknown │"
          echo "├───────────────────────┼─────────┤"
          echo "│ ${BOLD}Total${NC}                 │ ${BOLD}$total${NC} │"
          echo "└───────────────────────┴─────────┘"
          echo "::endgroup::"

          # 6. Detailed findings
          if [[ $critical -gt 0 || $high -gt 0 ]]; then
            echo "::group::🟣 Critical / 🔴 High Vulnerabilities"
            jq -r '
              .vulnerabilities[]
              | select(.severity == "critical" or .severity == "high")
              | "\(.severity | ascii_upcase) | \(.packageName)@\(.version)\n" +
                "📛 Title: \(.title)\n" +
                "🔗 CVE: \(.identifiers.CVE[0] // "None")\n" +
                "⚠️ CVSS: \(.cvssScore // "?") (\(.CVSSv3 // "No vector"))\n" +
                "💡 Fix: \(if .semver.patched then "Upgrade to \(.semver.patched[0])" 
                       elif .semver.unaffected then "Use version: \(.semver.unaffected[0])" 
                       else "See: \(.url // "No fix info")" end)\n" +
                "---"
            ' sbom-result.json
            echo "::endgroup::"
          fi

          # 7. Fail conditions
          if [[ "$critical" -gt 0 || "$high" -gt 0 ]]; then
            echo "::error::┌─────────────────────────────────────────────────────┐"
            echo "::error::│ ${RED}${BOLD}CRITICAL SECURITY ISSUES DETECTED${NC}              │"
            echo "::error::├─────────────────────────────────────────────────────┤"
            echo "::error::│ 🟣 Critical vulnerabilities: $critical               │"
            echo "::error::│ 🔴 High vulnerabilities: $high                      │"
            echo "::error::│                                                     │"
            echo "::error::│ Review the detailed report above and either:        │"
            echo "::error::│                                                     │"
            echo "::error::│ 1. Fix Vulnerabilities                              │"
            echo "::error::│ 2. Add justified exceptions in .snyk policy file    │"
            echo "::error::└─────────────────────────────────────────────────────┘"
            exit 1
          elif [[ "$unknown" -gt 0 ]]; then
            echo "::warning::⚪ Scan completed with $unknown unknown severity vulnerabilities"
          fi

      - name: 🧹 Cleanup
        if: always() && steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          rm -f pub-sbom.json sbom-result.json

      - name: ℹ️ Skip if not a Dart/Flutter project
        if: steps.detect.outputs.is_dart != 'true'
        shell: bash
        run: echo "🟡 Skipping scan - not a Dart/Flutter project"
