name: Dart/Flutter Security Scan

on:
  workflow_call:
    inputs:
      repo-path:
        description: 'Path to the repository to scan'
        required: false
        default: '.'
        type: string
      flutter-version:
        description: 'Flutter SDK version'
        required: false
        default: 'stable'
        type: string

    secrets:
      SNYK_SCANNER_TOKEN:
        required: true
      SNYK_SCANNER_REGION:
        required: true

jobs:
  dart-scan:
    name: Dart Security Scanner
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect Project Type
        id: detect
        shell: bash
        run: |
          REPO_PATH="${{ inputs.repo-path }}"

          if [ ! -f "${REPO_PATH}/pubspec.yaml" ]; then
            echo "::warning::No pubspec.yaml found - not a Dart/Flutter project"
            echo "is_dart=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if grep -q "sdk: flutter" "${REPO_PATH}/pubspec.yaml" || grep -q "flutter:" "${REPO_PATH}/pubspec.yaml"; then
            echo "Project Type : Flutter"
            echo "is_flutter=true" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          else
            echo "Project Type : Dart"
            echo "is_flutter=false" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          fi

      - name: 🧰 Set up Flutter SDK
        if: steps.detect.outputs.is_dart == 'true'
        uses: flutter-actions/setup-flutter@v3
        with:
          version: ${{ inputs.flutter-version }}
          channel: stable

      - name: ⚡ Cache Pub Dependencies
        id: cache-pub
        if: steps.detect.outputs.is_dart == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: 🔎 Check Pub Cache Hit
        if: steps.detect.outputs.is_dart == 'true'
        run: echo "Cache hit for Dart pub? ${{ steps.cache-pub.outputs.cache-hit }}"

      - name: ⚡ Cache Global NPM Tools
        id: cache-npm
        if: steps.detect.outputs.is_dart == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-npm-tools-v1

      - name: 🔎 Check NPM Tools Cache Hit
        if: steps.detect.outputs.is_dart == 'true'
        run: echo "Cache hit for NPM tools? ${{ steps.cache-npm.outputs.cache-hit }}"

      - name: 📦 Install required tools
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          mkdir -p ~/.npm-global
          npm config set prefix ~/.npm-global
          export PATH="$HOME/.npm-global/bin:$PATH"
          npm install -g snyk@latest @cyclonedx/cdxgen@latest >/dev/null 2>&1

      - name: 🔐 Authentication
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env:
          SNYK_SCANNER_TOKEN: ${{ secrets.SNYK_SCANNER_TOKEN }}
          SNYK_SCANNER_REGION: ${{ secrets.SNYK_SCANNER_REGION }}
        run: |
          echo "::add-mask::$SNYK_SCANNER_TOKEN"
          echo "::add-mask::$SNYK_SCANNER_REGION"

          snyk config set endpoint="https://api.${SNYK_SCANNER_REGION}.snyk.io" >/dev/null 2>&1
          snyk auth "$SNYK_SCANNER_TOKEN" >/dev/null 2>&1

      - name: 📦 Resolve dependencies
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          dart pub get >/dev/null 2>&1 || {
            echo "::error::Failed to resolve dependencies"
            exit 1
          }

      - name: 📊 Scan, Fail if Critical or High vulnerabilities found !!!
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          export PATH="$HOME/.npm-global/bin:$PATH"

          cdxgen -t pub -o pub-sbom.json >/dev/null 2>&1

          snyk sbom test --experimental --file pub-sbom.json --org=affinidi --json > sbom-result.json

          critical=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "critical")] | length' sbom-result.json)
          high=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "high")] | length' sbom-result.json)
          unknown=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "unknown")] | length' sbom-result.json)

          echo "::group::📊 Vulnerability Summary"

          jq -er '
            if ((.vulnerabilities? // []) | length) == 0 then
              empty
            else
              .vulnerabilities
              | group_by(.severity?)[]
              | {
                  severity: .[0].severity,
                  issues: [.[] | {
                    id: .id?,
                    title: .title?,
                    pkg: .packageName?,
                    version: .version?
                  }]
                }
              | (
                  if .severity == "critical" then "\n🟣 CRITICAL SEVERITY"
                  elif .severity == "high" then "\n🔴 HIGH SEVERITY"
                  elif .severity == "medium" then "\n🟠 MEDIUM SEVERITY"
                  elif .severity == "low" then "\n🟡 LOW SEVERITY"
                  else "\n⚪ UNKNOWN SEVERITY"
                  end
                ) + "\n" +
                (
                  .issues[]
                  | "\n- \(.title) [\(.id)]\n  📦 Package: \(.pkg)@\(.version)"
                )
            end
          ' sbom-result.json || echo "✅ No vulnerabilities detected, Great job! 🎉"

          echo "::endgroup::"

          if [[ "$critical" -gt 0 || "$high" -gt 0 ]]; then
            echo "::error::❌ Scan failed due to high-severity issues:"
            echo "  🟣 Critical vulnerabilities: $critical"
            echo "  🔴 High vulnerabilities: $high"
            exit 1
          elif [[ "$unknown" -gt 0 ]]; then
            echo "::warning::⚪ Scan completed with $unknown unknown severity vulnerabilities"
          else
            echo "✅ No Critical (🟣) or High (🔴) vulnerabilities found. Great job! 🎉"
          fi

      - name: 🧹 Cleanup
        if: always() && steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          rm -f pub-sbom.json sbom-result.json

      - name: ℹ️ Skip if not a Dart/Flutter project
        if: steps.detect.outputs.is_dart != 'true'
        shell: bash
        run: echo "🟡 Skipping scan - not a Dart/Flutter project"
