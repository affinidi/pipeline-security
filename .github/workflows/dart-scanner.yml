name: Dart/Flutter Security Scan

on:
  workflow_call:
    inputs:
      repo-path:
        description: 'Path to the repository to scan'
        required: false
        default: '.'
        type: string
      flutter-version:
        description: 'Flutter SDK version'
        required: false
        default: 'stable'
        type: string

    secrets:
      SNYK_SCANNER_TOKEN:
        required: true
      SNYK_SCANNER_REGION:
        required: true
      SNYK_GLOBAL_POLICY:
        required: true

jobs:
  dart-scan:
    name: Dart Security Scanner
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect Project Type
        id: detect
        shell: bash
        run: |
          REPO_PATH="${{ inputs.repo-path }}"

          if [ ! -f "${REPO_PATH}/pubspec.yaml" ]; then
            echo "::warning::No pubspec.yaml found - not a Dart/Flutter project"
            echo "is_dart=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if grep -q "sdk: flutter" "${REPO_PATH}/pubspec.yaml" || grep -q "flutter:" "${REPO_PATH}/pubspec.yaml"; then
            echo "Project Type : Flutter"
            echo "is_flutter=true" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          else
            echo "Project Type : Dart"
            echo "is_flutter=false" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          fi

      - name: 🧰 Set up Flutter SDK
        if: steps.detect.outputs.is_dart == 'true'
        uses: flutter-actions/setup-flutter@v3
        with:
          version: ${{ inputs.flutter-version }}
          channel: stable
          cache: true
          cache-sdk: true

      - name: ⚡ Cache Global NPM Tools
        id: cache-npm
        if: steps.detect.outputs.is_dart == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-npm-tools-v1

      - name: 📦 Install required tools
        if: steps.detect.outputs.is_dart == 'true'
        shell: bash
        run: |
          if ! command -v snyk > /dev/null || ! command -v cdxgen > /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix ~/.npm-global
            npm install -g snyk@latest @cyclonedx/cdxgen@latest
            echo "$HOME/.npm-global/bin" >> $GITHUB_PATH
          fi

      - name: 🔐 Authentication
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env:
          SNYK_SCANNER_TOKEN: ${{ secrets.SNYK_SCANNER_TOKEN }}
          SNYK_SCANNER_REGION: ${{ secrets.SNYK_SCANNER_REGION }}
        run: |
          echo "::add-mask::$SNYK_SCANNER_TOKEN"
          echo "::add-mask::$SNYK_SCANNER_REGION"

          snyk config set endpoint="https://api.${SNYK_SCANNER_REGION}.snyk.io" >/dev/null 2>&1
          snyk auth "$SNYK_SCANNER_TOKEN" >/dev/null 2>&1

      - name: 📦 Resolve dependencies
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          dart pub get

      - name: 📦 Install yq
        if: steps.detect.outputs.is_dart == 'true'
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: 🧪 Run SBOM Scan and Check Vulnerabilities
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env: 
          SNYK_GLOBAL_POLICY: ${{ secrets.SNYK_GLOBAL_POLICY }}
        run: |
          # Generate SBOM
          if ! cdxgen -t pub -o pub-sbom.json >/dev/null 2>&1; then
            echo "::warning::⚠️ cdxgen exited with error — checking SBOM validity"
            if [ ! -s pub-sbom.json ]; then
              echo "::error::❌ SBOM generation failed completely"
              exit 1
            fi
          fi

          if ! jq empty pub-sbom.json 2>/dev/null; then
            echo "::error::❌ Invalid SBOM JSON"
            exit 1
          fi

          echo "----------------------------------------------------------------------"
          echo "📦 Generated SBOM"

          # Run Snyk SBOM test
          SNYK_EXIT=0
          snyk sbom test --experimental --file pub-sbom.json --org=affinidi --json > sbom-result.json || SNYK_EXIT=$?

          if [[ "$SNYK_EXIT" -ne 0 ]] && [ ! -f "sbom-result.json" ]; then
            echo "::error::❌ Snyk scan failed and no results file was generated"
            exit 1
          fi

          echo "----------------------------------------------------------------------"
          echo "✓ Scanning Finished"

          # Local & global policy paths
          LOCAL_POLICY="${{ inputs.repo-path }}/.snyk"
          GLOBAL_POLICY_PATH="./.snyk-global"
          LOCAL_IGNORES="[]"
          GLOBAL_IGNORES="[]"

          # Extract ignores function (sorted by year + number)
          extract_ignores() {
            local file=$1
            if [ -f "$file" ]; then
              yq -o=json '.ignore | keys' "$file" \
                | jq -r '.[]' \
                | sort -t'-' -k2,2n -k3,3n \
                | tr '[:lower:]' '[:upper:]'
            fi
          }

          # Local ignores
          if [ -f "$LOCAL_POLICY" ]; then
            LOCAL_IGNORES=$(extract_ignores "$LOCAL_POLICY")
            echo "----------------------------------------------------------------------"
            echo "🗂 Found local .snyk file, ignoring $(echo "$LOCAL_IGNORES" | wc -l | xargs) CVE(s)"
            i=1
            while IFS= read -r cve; do
              echo "  $i) $cve"
              i=$((i+1))
            done <<< "$LOCAL_IGNORES"
          else
            echo "----------------------------------------------------------------------"
            echo "ℹ️ No local .snyk file found"
          fi

          # Global policy fetch
          if [ -n "$SNYK_GLOBAL_POLICY" ]; then
            curl -sSL "$SNYK_GLOBAL_POLICY" -o "$GLOBAL_POLICY_PATH" || echo "⚠️ Failed to fetch global policy"
          fi

          if [ -f "$GLOBAL_POLICY_PATH" ]; then
            GLOBAL_IGNORES=$(extract_ignores "$GLOBAL_POLICY_PATH")
            echo "----------------------------------------------------------------------"
            echo "🗂 Found global .snyk-global file, ignoring $(echo "$GLOBAL_IGNORES" | wc -l | xargs) CVE(s)"
            i=1
            while IFS= read -r cve; do
              echo "  $i) $cve"
              i=$((i+1))
            done <<< "$GLOBAL_IGNORES"
          else
            echo "----------------------------------------------------------------------"
            echo "ℹ️ No global .snyk-global file available"
          fi

          # Merge for filtering (allow duplicates)
          IGNORED_CVES=$(printf "%s\n%s\n" "$LOCAL_IGNORES" "$GLOBAL_IGNORES")
          IGNORED_CVES_JSON=$(printf '%s\n' "$IGNORED_CVES" | jq -R . | jq -s .)

          # Normalize CVEs in SBOM to uppercase
          jq '
            .vulnerabilities |= map(
              if .identifiers.CVE then
                .identifiers.CVE |= map(ascii_upcase)
              else
                .
              end
            )
          ' sbom-result.json > sbom-result-normalized.json

          # Filter out ignored CVEs
          jq --argjson ignored "$IGNORED_CVES_JSON" '
            .vulnerabilities |= map(select(
              (.identifiers.CVE // []) | all(. as $cve | $ignored | index($cve) | not)
            ))
          ' sbom-result-normalized.json > sbom-result-filtered.json

          # Count filtered results
          critical=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "critical")] | length' sbom-result-filtered.json)
          high=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "high")] | length' sbom-result-filtered.json)
          unknown=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "unknown")] | length' sbom-result-filtered.json)

          if [[ $critical -gt 0 || $high -gt 0 ]]; then
            echo "----------------------------------------------------------------------"
            echo "                        VULNERABILITY DETAILS          "
            echo "----------------------------------------------------------------------"
            jq -r '
              (.vulnerabilities // [])
              | map(select(.severity == "critical" or .severity == "high"))
              | .[]
              | "\(.severity | ascii_upcase) | \(.packageName)@\(.version)\n" +
                "📛 Title: \(.title)\n" +
                "🔗 CVE: \(.identifiers.CVE[0] // "None")\n" +
                "⚠️ CVSS: \(.cvssScore // "?") (\(.CVSSv3 // "No vector"))\n" +
                "💡 Fix: \(if .semver.patched then "Upgrade to \(.semver.patched[0])" 
                      elif .semver.unaffected then "Use version: \(.semver.unaffected[0])" 
                      else "See: \(.url // "No fix info")" end)\n" +
                "---"
            ' sbom-result-filtered.json

            echo "::error::┌────────────────────────────────────────────────────────────────────────────────────────────────────────"
            echo "::error::│ CRITICAL SECURITY ISSUES DETECTED                   "
            echo "::error::├────────────────────────────────────────────────────────────────────────────────────────────────────────"
            echo "::error::│ 🟣 Critical vulnerabilities: $critical              "
            echo "::error::│ 🔴 High vulnerabilities: $high                      "
            echo "::error::│                                                     "
            echo "::error::│ Review the detailed report above and either:        "
            echo "::error::│                                                     "
            echo "::error::│ 1. Fix Vulnerabilities OR                           "
            echo "::error::│ 2. Consult Security in case of false positives / risk acceptance, update .snyk policy file accordingly"
            echo "::error::└────────────────────────────────────────────────────────────────────────────────────────────────────────"
            exit 1

          elif [[ "$unknown" -gt 0 ]]; then
            echo "::warning::⚪ Scan completed with $unknown unknown severity vulnerabilities"
          else
            echo "----------------------------------------------------------------------"
            echo "✅ All good, no critical or high vulnerabilities found. Good job! 🎉"
            echo "----------------------------------------------------------------------"
          fi

      - name: 🧹 Cleanup
        if: always() && steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          rm -f pub-sbom.json sbom-result.json sbom-result-normalized.json sbom-result-filtered.json .snyk-global


      - name: ℹ️ Skip if not a Dart/Flutter project
        if: steps.detect.outputs.is_dart != 'true'
        shell: bash
        run: echo "🟡 Skipping scan - not a Dart/Flutter project"
