name: Dart/Flutter Security Scan

on:
  workflow_call:
    inputs:
      repo-path:
        description: 'Path to the repository to scan'
        required: false
        default: '.'
        type: string
      flutter-version:
        description: 'Flutter SDK version'
        required: false
        default: 'stable'
        type: string

    secrets:
      SNYK_SCANNER_TOKEN:
        required: true
      SNYK_SCANNER_REGION:
        required: true

jobs:
  dart-scan:
    name: Dart Security Scanner
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect Project Type
        id: detect
        shell: bash
        run: |
          REPO_PATH="${{ inputs.repo-path }}"

          if [ ! -f "${REPO_PATH}/pubspec.yaml" ]; then
            echo "::warning::No pubspec.yaml found - not a Dart/Flutter project"
            echo "is_dart=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if grep -q "sdk: flutter" "${REPO_PATH}/pubspec.yaml" || grep -q "flutter:" "${REPO_PATH}/pubspec.yaml"; then
            echo "Project Type : Flutter"
            echo "is_flutter=true" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          else
            echo "Project Type : Dart"
            echo "is_flutter=false" >> $GITHUB_OUTPUT
            echo "is_dart=true" >> $GITHUB_OUTPUT
          fi

      - name: 🧰 Set up Flutter SDK
        if: steps.detect.outputs.is_dart == 'true'
        uses: flutter-actions/setup-flutter@v3
        with:
          version: ${{ inputs.flutter-version }}
          channel: stable
          cache: true
          cache-sdk: true

      - name: ⚡ Cache Global NPM Tools
        id: cache-npm
        if: steps.detect.outputs.is_dart == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-npm-tools-v1

      - name: 📦 Install required npm tools if not present
        if: steps.detect.outputs.is_dart == 'true'
        shell: bash
        run: |
          if ! command -v snyk > /dev/null || ! command -v cdxgen > /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix ~/.npm-global
            npm install -g snyk@latest @cyclonedx/cdxgen@latest
            echo "$HOME/.npm-global/bin" >> $GITHUB_PATH
          fi

      - name: 🔐 Authentication
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env:
          SNYK_SCANNER_TOKEN: ${{ secrets.SNYK_SCANNER_TOKEN }}
          SNYK_SCANNER_REGION: ${{ secrets.SNYK_SCANNER_REGION }}
        run: |
          echo "::add-mask::$SNYK_SCANNER_TOKEN"
          echo "::add-mask::$SNYK_SCANNER_REGION"

          snyk config set endpoint="https://api.${SNYK_SCANNER_REGION}.snyk.io" >/dev/null 2>&1
          snyk auth "$SNYK_SCANNER_TOKEN" >/dev/null 2>&1

      - name: 📦 Resolve dependencies
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          dart pub get

      - name: 🧪 Run SBOM Scan with Snyk
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          # 1. Generate SBOM with verbose output
          echo "Generating SBOM..."
          if ! cdxgen -t pub -o pub-sbom.json; then
            echo "::warning::⚠️ cdxgen exited with error — checking SBOM validity"
            if [ ! -s pub-sbom.json ]; then
              echo "::error::❌ SBOM generation failed completely"
              exit 1
            else
              echo "Found partial SBOM file, continuing..."
            fi
          fi

          # 2. Verify SBOM file content
          echo "Validating SBOM..."
          if ! jq empty pub-sbom.json; then
            echo "::error::❌ Invalid SBOM JSON"
            exit 1
          fi

          # 3. Run Snyk scan with debug output
          POLICY_PATH="${{ inputs.repo-path }}/.snyk"
          SNYK_COMMON_ARGS="--experimental --file pub-sbom.json --org=affinidi"

          echo "Running Snyk scan..."
          if [ -f "$POLICY_PATH" ]; then
            echo "Using .snyk policy file"
            snyk sbom test $SNYK_COMMON_ARGS --policy-path="$POLICY_PATH" --json > sbom-result.json || SNYK_EXIT=$?
          else
            echo "No .snyk policy file found"
            snyk sbom test $SNYK_COMMON_ARGS --json > sbom-result.json || SNYK_EXIT=$?
          fi

          # 4. Handle Snyk results
          if [ -n "$SNYK_EXIT" ]; then
            echo "::warning::⚠️ Snyk exited with code $SNYK_EXIT"
            
            if [ -f "sbom-result.json" ]; then
              echo "SBOM result file exists, checking content..."
              if jq -e '.vulnerabilities' sbom-result.json >/dev/null; then
                echo "Found vulnerabilities in results:"
                jq '.vulnerabilities' sbom-result.json
              else
                echo "::error::❌ Unexpected Snyk output format"
                cat sbom-result.json
                exit 1
              fi
            else
              echo "::error::❌ No sbom-result.json file was generated"
              exit 1
            fi
          else
            echo "✅ Snyk scan completed successfully"
          fi

      - name: 📋 Print Vulnerability Summary
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          echo "::group::📊 Vulnerability Summary"
          jq '
            if ((.vulnerabilities? // []) | length) == 0 then
              empty
            else
              .vulnerabilities
              | group_by(.severity?)[]
              | {
                  severity: .[0].severity,
                  issues: [.[] | {
                    id: .id?,
                    title: .title?,
                    pkg: .packageName?,
                    version: .version?
                  }]
                }
              | (
                  if .severity == "critical" then "\n🟣 CRITICAL SEVERITY"
                  elif .severity == "high" then "\n🔴 HIGH SEVERITY"
                  elif .severity == "medium" then "\n🟠 MEDIUM SEVERITY"
                  elif .severity == "low" then "\n🟡 LOW SEVERITY"
                  else "\n⚪ UNKNOWN SEVERITY"
                  end
                ) + "\n" +
                (
                  .issues[]
                  | "\n- \(.title) [\(.id)]\n  📦 Package: \(.pkg)@\(.version)"
                )
            end
          ' sbom-result.json || echo "✅ No vulnerabilities detected, Great job! 🎉"
          echo "::endgroup::"

      - name: ❌ Fail if Critical or High vulnerabilities
        if: steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          critical=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "critical")] | length' sbom-result.json)
          high=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "high")] | length' sbom-result.json)
          unknown=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "unknown")] | length' sbom-result.json)
          total=$(jq '[.vulnerabilities? // [] | length]' sbom-result.json)

          echo "----- Vulnerabilities Stats -------"
          echo "Total vulnerabilities found: $total"
          echo "Critical vulnerabilities: $critical"
          echo "High vulnerabilities: $high"
          echo "Unknown severity vulnerabilities: $unknown"

          if [[ "$critical" -gt 0 || "$high" -gt 0 ]]; then
            echo "::error::❌ Scan failed due to high-severity issues"
            exit 1
          elif [[ "$unknown" -gt 0 ]]; then
            echo "::warning::⚪ Scan completed with $unknown unknown severity vulnerabilities"
          else
            echo "✅ No Critical (🟣) or High (🔴) vulnerabilities found. Great job! 🎉"
          fi

      - name: 🧹 Cleanup
        if: always() && steps.detect.outputs.is_dart == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          rm -f pub-sbom.json sbom-result.json

      - name: ℹ️ Skip if not a Dart/Flutter project
        if: steps.detect.outputs.is_dart != 'true'
        shell: bash
        run: echo "🟡 Skipping scan - not a Dart/Flutter project"
