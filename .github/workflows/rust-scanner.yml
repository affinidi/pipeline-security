name: Rust Security Scan

on:
  workflow_call:
    inputs:
      repo-path:
        description: 'Path to the repository to scan'
        required: false
        default: '.'
        type: string

    secrets:
      SNYK_SCANNER_TOKEN:
        required: true
      SNYK_SCANNER_REGION:
        required: true
      SNYK_GLOBAL_POLICY:
        required: true

jobs:
  rust-scan:
    name: Rust Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üîç Detect Project Type
        id: detect
        shell: bash
        run: |
          REPO_PATH="${{ inputs.repo-path }}"
          if [ ! -f "${REPO_PATH}/Cargo.toml" ]; then
            echo "::warning::No Cargo.toml found - not a Rust project"
            echo "is_rust=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Project Type : Rust"
          echo "is_rust=true" >> $GITHUB_OUTPUT

      - name: üì¶ Install system libraries
        if: steps.detect.outputs.is_rust == 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pkg-config libdbus-1-dev

      - name: ü¶Ä Set up Rust Toolchain with components
        if: steps.detect.outputs.is_rust == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: ‚ö° Cache Target
        id: cache-target
        if: steps.detect.outputs.is_rust == 'true'
        uses: actions/cache@v4
        with:
          path: |
            **/target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: ‚ö° Cache Cargo Bin
        id: cache-bin
        if: steps.detect.outputs.is_rust == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-v3

      - name: ‚ö° Cache Global NPM Tools
        id: cache-npm
        if: steps.detect.outputs.is_rust == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-npm-tools-v1

      - name: üì¶ Install Rust analysis tools
        if: steps.detect.outputs.is_rust == 'true'
        shell: bash
        run: |
          # Only install if missing
          if ! command -v cargo-sbom >/dev/null 2>&1; then
            cargo install cargo-sbom
          fi
          if ! command -v cargo-audit >/dev/null 2>&1; then
            cargo install cargo-audit
          fi

      - name: üì¶ Install required tools
        if: steps.detect.outputs.is_rust == 'true'
        shell: bash
        run: |
          if ! command -v snyk > /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix ~/.npm-global
            npm install -g snyk@latest
            echo "$HOME/.npm-global/bin" >> $GITHUB_PATH
          fi

      - name: üì¶ Install yq
        if: steps.detect.outputs.is_rust == 'true'
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: üîê Authentication
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env:
          SNYK_SCANNER_TOKEN: ${{ secrets.SNYK_SCANNER_TOKEN }}
          SNYK_SCANNER_REGION: ${{ secrets.SNYK_SCANNER_REGION }}
        run: |
          echo "::add-mask::$SNYK_SCANNER_TOKEN"
          echo "::add-mask::$SNYK_SCANNER_REGION"
          snyk config set endpoint="https://api.${SNYK_SCANNER_REGION}.snyk.io" >/dev/null 2>&1
          snyk auth "$SNYK_SCANNER_TOKEN" >/dev/null 2>&1

      - name: üõ°Ô∏è Run Cargo Audit (RustSec)
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        continue-on-error: true
        run: |
          echo "Running cargo audit..."
          cargo audit --json > audit-result.json || true

          if [ ! -s audit-result.json ]; then
            echo "::warning::‚ö†Ô∏è cargo audit produced no output, generating empty result"
            echo '{"vulnerabilities":{"list":[],"count":0},"warnings":[]}' > audit-result.json
          fi

          if ! jq empty audit-result.json; then
            echo "::warning::‚ö†Ô∏è Invalid Cargo Audit JSON"
            exit 1
          fi

      - name: üîé Snyk Code Test
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        continue-on-error: true
        run: |
          echo "Running Snyk Code Test..."
          SNYK_CODE_EXIT=0
          snyk code test --json > snyk-code-result.json || SNYK_CODE_EXIT=$?

          if [[ "$SNYK_CODE_EXIT" -ne 0 ]] && [ ! -f "snyk-code-result.json" ]; then
            echo '{"issues":[]}' > snyk-code-result.json
          fi

          if ! jq empty snyk-code-result.json 2>/dev/null; then
            echo "::warning::‚ö†Ô∏è Invalid Snyk Code JSON"
            exit 1
          fi

      - name: üß™ Run SBOM Scan and Check Vulnerability
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env: 
          SNYK_GLOBAL_POLICY: ${{ secrets.SNYK_GLOBAL_POLICY }}
        continue-on-error: true
        run: |
          # Generate SBOM
          if ! cargo sbom --output-format cyclone_dx_json_1_4 > cargo-sbom.json 2>/dev/null; then
            echo "::warning::‚ö†Ô∏è cargo sbom exited with error ‚Äî checking SBOM validity"
            if [ ! -s cargo-sbom.json ]; then
              echo "::warning::‚ö†Ô∏è SBOM generation failed completely"
              exit 1
            fi
          fi

          if ! jq empty cargo-sbom.json 2>/dev/null; then
            echo "::warning::‚ö†Ô∏è Invalid SBOM JSON"
            exit 1
          fi

          echo "----------------------------------------------------------------------"
          echo "üì¶ Generated SBOM"

          # Run Snyk SBOM test
          SNYK_EXIT=0
          snyk sbom test --experimental --file cargo-sbom.json --org=affinidi --json > sbom-result.json || SNYK_EXIT=$?

          if [[ "$SNYK_EXIT" -ne 0 ]] && [ ! -f "sbom-result.json" ]; then
            echo "::warning::‚ö†Ô∏è Snyk scan failed and no results file was generated"
            exit 1
          fi

          echo "----------------------------------------------------------------------"
          echo "‚úì Scanning Finished"

          # Extract ignored CVEs from local and global policies
          LOCAL_POLICY="${{ inputs.repo-path }}/.snyk"
          LOCAL_IGNORES="[]"
          GLOBAL_POLICY_PATH="./.snyk-global"
          GLOBAL_IGNORES="[]"

          # Extract ignores as proper JSON array (sorted by year + number)
          extract_ignores() {
            local file=$1
            
            # Return empty array if file doesn't exist
            if [ ! -f "$file" ]; then
              echo "[]"
              return
            fi
            
            # Get ignore keys, handling empty objects gracefully
            local cve_list
            cve_list=$(yq '.ignore | keys | .[]' "$file" 2>/dev/null | tr '[:lower:]' '[:upper:]' | sort -t'-' -k2,2n -k3,3n)
            
            # Convert to JSON array
            if [ -n "$cve_list" ]; then
              echo "$cve_list" | jq -R . | jq -s .
            else
              echo "[]"
            fi
          }

          # Check local policy
          if [ -f "$LOCAL_POLICY" ]; then
            LOCAL_IGNORES=$(extract_ignores "$LOCAL_POLICY")
            LOCAL_COUNT=$(echo "$LOCAL_IGNORES" | jq 'length')

            echo "----------------------------------------------------------------------"
            echo "üóÇ Found local .snyk file, ignoring $LOCAL_COUNT CVE(s)"
            i=1
            for cve in $(echo "$LOCAL_IGNORES" | jq -r '.[]'); do
              echo "  $i) $cve"
              i=$((i+1))
            done
          else
            echo "----------------------------------------------------------------------"
            echo "‚ÑπÔ∏è No local .snyk file found"
          fi

          # Check global policy
          if [ -n "$SNYK_GLOBAL_POLICY" ]; then
            curl -sSL "$SNYK_GLOBAL_POLICY" -o "$GLOBAL_POLICY_PATH" || echo "‚ö†Ô∏è Failed to fetch global policy"
          fi

          if [ -f "$GLOBAL_POLICY_PATH" ]; then
            GLOBAL_IGNORES=$(extract_ignores "$GLOBAL_POLICY_PATH")
            GLOBAL_COUNT=$(echo "$GLOBAL_IGNORES" | jq 'length')

            echo "----------------------------------------------------------------------"
            echo "üóÇ Found global .snyk-global file, ignoring $GLOBAL_COUNT CVE(s)"
            i=1
            for cve in $(echo "$GLOBAL_IGNORES" | jq -r '.[]'); do
              echo "  $i) $cve"
              i=$((i+1))
            done
          else
            echo "----------------------------------------------------------------------"
            echo "‚ÑπÔ∏è No global .snyk-global file available"
          fi

          # Merge for filtering
          IGNORED_CVES_JSON=$(jq -n --argjson local "$LOCAL_IGNORES" --argjson global "$GLOBAL_IGNORES" '$local + $global')

                    # Normalize results before combining
          # Normalize cargo-audit
          jq '[
            .vulnerabilities.list[]? |
            {
              id: .advisory.id,
              source: "cargo-audit",
              package: .package.name,
              version: .package.version,
              severity: (.advisory.severity // "unknown"),
              title: .advisory.title,
              cve: (.advisory.aliases[0] // null),
              cvss: (.advisory.cvss // null),
              url: (.advisory.url // null),
              fix: (if .versions.patched then .versions.patched else null end)
            }
          ]' audit-result.json > norm-audit.json

          # Normalize snyk-sbom
          jq '[
            .vulnerabilities[]? |
            {
              id: (.identifiers.CVE[0] // .id),
              source: "snyk-sbom",
              package: .packageName,
              version: .version,
              severity: (.severity // "unknown"),
              title: .title,
              cve: (.identifiers.CVE[0] // null),
              cvss: (.cvssScore // null),
              cvss_vector: (.CVSSv3 // null),
              url: (.url // null),
              fix: (if .semver.patched then .semver.patched[0]
                    elif .semver.unaffected then .semver.unaffected[0]
                    else null end)
            }
          ]' sbom-result.json > norm-sbom.json

          # Normalize snyk-code (SARIF)
          jq '[
            .runs[].results[]? |
            {
              id: .ruleId,
              source: "snyk-code",
              package: null,
              version: null,
              severity: .level,
              title: .message.text,
              file: .locations[0].physicalLocation.artifactLocation.uri,
              line: .locations[0].physicalLocation.region.startLine,
              fix: "Manual review required"
            }
          ]' snyk-code-result.json > norm-code.json

          # Combine normalized
          jq -s '{sca: {cargo_audit: .[0], snyk_sbom: .[1]}, sast: {snyk_code: .[2]}}' \
            norm-audit.json norm-sbom.json norm-code.json > combined-result.json

          # Filter ignored CVEs
          jq --argjson ignored "$IGNORED_CVES_JSON" '
            .sca.snyk_sbom |= (if . then map(
              if .cve then .cve |= ascii_upcase | . end
            ) | map(select(
              (.cve // null) as $cve | ($cve|not or ($ignored | index($cve)|not))
            )) else [] end)
          ' combined-result.json > combined-result-filtered.json

          # Count vulnerabilities by severity
          audit_critical=$(jq '[.sca.cargo_audit[]? | select(.severity=="critical")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          audit_high=$(jq '[.sca.cargo_audit[]? | select(.severity=="high")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          snyk_critical=$(jq '[.sca.snyk_sbom[]? | select(.severity=="critical")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          snyk_high=$(jq '[.sca.snyk_sbom[]? | select(.severity=="high")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          code_critical=$(jq '[.sast.snyk_code[]? | select(.severity=="critical")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          code_high=$(jq '[.sast.snyk_code[]? | select(.severity=="high")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          
          total_critical=$((audit_critical + snyk_critical + code_critical))
          total_high=$((audit_high + snyk_high + code_high))
          unknown=$(jq '[.sca.snyk_sbom[]? | select(.severity=="unknown")] | length' combined-result-filtered.json 2>/dev/null || echo 0)

          if [[ $total_critical -gt 0 || $total_high -gt 0 ]]; then
            echo "----------------------------------------------------------------------"
            echo "                        VULNERABILITY DETAILS          "
            echo "----------------------------------------------------------------------"
            
            # Cargo Audit
            jq -r '
              .sca.cargo_audit
              | map(select(.severity == "critical" or .severity == "high"))
              | .[]
              | "\(.severity | ascii_upcase) | \(.package)@\(.version)\n" +
                "üìõ Title: \(.title)\n" +
                "üîó CVE: \(.cve // "None")\n" +
                "‚ö†Ô∏è CVSS: \(.cvss // "?") \n" +
                "üí° Fix: \(if .fix then "Upgrade to: \(.fix | join(", "))" else "See: \(.url // "No fix info")" end)\n" +
                "---"
            ' combined-result-filtered.json

            # Snyk SBOM
            jq -r '
              .sca.snyk_sbom
              | map(select(.severity == "critical" or .severity == "high"))
              | .[]
              | "\(.severity | ascii_upcase) | \(.package)@\(.version)\n" +
                "üìõ Title: \(.title)\n" +
                "üîó CVE: \(.cve // "None")\n" +
                "‚ö†Ô∏è CVSS: \(.cvss // "?") (\(.cvss_vector // "No vector"))\n" +
                "üí° Fix: \(if .fix then "Upgrade to \(.fix)" else "See: \(.url // "No fix info")" end)\n" +
                "---"
            ' combined-result-filtered.json

            # Snyk Code
            jq -r '
              .sast.snyk_code
              | map(select(.severity == "critical" or .severity == "high"))
              | .[]
              | "\(.severity | ascii_upcase) | \(.id)\n" +
                "üìõ Title: \(.title)\n" +
                "üìç File: \(.file // "?"):\(.line // "?")\n" +
                "üí° Fix: \(.fix // "Manual review required")\n" +
                "---"
            ' combined-result-filtered.json

            echo "::warning::‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "::warning::‚îÇ CRITICAL SECURITY ISSUES DETECTED                   "
            echo "::warning::‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "::warning::‚îÇ üü£ Critical vulnerabilities: $total_critical              "
            echo "::warning::‚îÇ üî¥ High vulnerabilities: $total_high                      "
            echo "::warning::‚îÇ                                                     "
            echo "::warning::‚îÇ Review the detailed report above and either:        "
            echo "::warning::‚îÇ                                                     "
            echo "::warning::‚îÇ 1. Fix Vulnerabilities OR                           "
            echo "::warning::‚îÇ 2. Consult Security incase of false positives / risk acceptance / review"
            echo "::warning::‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

          elif [[ "$unknown" -gt 0 ]]; then
            echo "::warning::‚ö™ Scan completed with $unknown unknown severity vulnerabilities"
          else
            echo "----------------------------------------------------------------------"
            echo "‚úÖ All good, no critical or high vulnerabilities found. Good job! üéâ"
            echo "----------------------------------------------------------------------"
          fi

      - name: üì§ Upload reports
        if: always() && steps.detect.outputs.is_rust == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: rust-security-reports
          path: |
            audit-result.json
            sbom-result.json
            snyk-code-result.json
            combined-result*.json
            cargo-sbom.json

      - name: üßπ Cleanup
        if: always() && steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          rm -f cargo-sbom.json sbom-result.json audit-result.json combined-result.json combined-result-filtered.json snyk-code-result.json

      - name: ‚ÑπÔ∏è Skip if not a Rust project
        if: steps.detect.outputs.is_rust != 'true'
        shell: bash
        run: echo "üü° Skipping scan - not a Rust project"