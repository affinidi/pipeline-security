name: Rust Security Scan

on:
  workflow_call:
    inputs:
      repo-path:
        description: 'Path to the repository to scan'
        required: false
        default: '.'
        type: string

    secrets:
      SNYK_SCANNER_TOKEN:
        required: true
      SNYK_SCANNER_REGION:
        required: true

jobs:
  rust-scan:
    name: Rust Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect Project Type
        id: detect
        shell: bash
        run: |
          REPO_PATH="${{ inputs.repo-path }}"

          if [ ! -f "${REPO_PATH}/Cargo.toml" ]; then
            echo "::warning::No Cargo.toml found - not a Rust project"
            echo "is_rust=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Project Type : Rust"
          echo "is_rust=true" >> $GITHUB_OUTPUT

      - name: 📦 Install system libraries
        if: steps.detect.outputs.is_rust == 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pkg-config libdbus-1-dev

      - name: 🦀 Set up Rust Toolchain with components
        if: steps.detect.outputs.is_rust == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: 📦 Install Rust analysis tools
        if: steps.detect.outputs.is_rust == 'true'
        shell: bash
        run: |
          cargo install cargo-cyclonedx || true
          cargo install cargo-audit || true
          npm install -g snyk@latest

      - name: 🔐 Authentication
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env:
          SNYK_SCANNER_TOKEN: ${{ secrets.SNYK_SCANNER_TOKEN }}
          SNYK_SCANNER_REGION: ${{ secrets.SNYK_SCANNER_REGION }}
        run: |
          echo "::add-mask::$SNYK_SCANNER_TOKEN"
          echo "::add-mask::$SNYK_SCANNER_REGION"

          snyk config set endpoint="https://api.${SNYK_SCANNER_REGION}.snyk.io" >/dev/null 2>&1
          snyk auth "$SNYK_SCANNER_TOKEN" >/dev/null 2>&1

      - name: 📦 Generate dependency metadata
        shell: bash
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        run: |
          echo "Generating Cargo dependency metadata..."
          cargo metadata --format-version=1 --no-deps > cargo-metadata.json

      - name: 📊 Unified Vulnerability Scan
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          echo "Running cargo audit..."
          cargo audit --json > audit-result.json || true

          echo "Generating SBOM with cargo-cyclonedx..."
          cargo cyclonedx --output-format json --output-file cargo-sbom.json

          echo "Running Snyk SBOM test..."
          snyk sbom test --experimental --file cargo-sbom.json --org=affinidi --json > sbom-result.json || true

          # Merge both results into a combined JSON
          jq -s '{cargo_audit: .[0], snyk: .[1]}' audit-result.json sbom-result.json > combined-result.json

          # Count vulnerabilities
          audit_critical=$(jq '[.cargo_audit.vulnerabilities.list[]? | select(.advisory.severity == "critical")] | length' combined-result.json)
          audit_high=$(jq '[.cargo_audit.vulnerabilities.list[]? | select(.advisory.severity == "high")] | length' combined-result.json)
          snyk_critical=$(jq '[.snyk.vulnerabilities? // [] | .[] | select(.severity == "critical")] | length' combined-result.json)
          snyk_high=$(jq '[.snyk.vulnerabilities? // [] | .[] | select(.severity == "high")] | length' combined-result.json)

          total_critical=$((audit_critical + snyk_critical))
          total_high=$((audit_high + snyk_high))

          echo "::group::📊 Vulnerability Summary"

          # Cargo Audit vulnerabilities
          if [[ $(jq '.cargo_audit.vulnerabilities.list | length' combined-result.json) -gt 0 ]]; then
            echo "🦀 Cargo Audit Findings:"
            jq -r '
              .cargo_audit.vulnerabilities.list[] |
              "⚠️ [\(.advisory.severity // "unknown")] \(.advisory.title) - \(.package.name)@\(.package.version)"
            ' combined-result.json
          else
            echo "✅ No vulnerabilities detected by Cargo Audit!"
          fi

          echo

          # Snyk vulnerabilities
          if [[ $(jq '(.snyk.vulnerabilities? // []) | length' combined-result.json) -gt 0 ]]; then
            echo "🔍 Snyk SBOM Findings:"
            jq -r '
              .snyk.vulnerabilities[] |
              "⚠️ [\(.severity)] \(.title) - \(.packageName)@\(.version)"
            ' combined-result.json
          else
            echo "✅ No vulnerabilities detected by Snyk!"
          fi

          echo "::endgroup::"

          if [[ "$total_critical" -gt 0 || "$total_high" -gt 0 ]]; then
            echo "::error::❌ Scan failed due to high-severity issues:"
            echo "  🟣 Critical vulnerabilities: $total_critical"
            echo "  🔴 High vulnerabilities: $total_high"
            exit 1
          else
            echo "✅ No Critical (🟣) or High (🔴) vulnerabilities found. Great job! 🎉"
          fi

      - name: 🧹 Cleanup
        shell: bash
        if: always() && steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        run: rm -f cargo-metadata.json cargo-sbom.json sbom-result.json audit-result.json combined-result.json

      - name: ℹ️ Skip if not a Rust project
        shell: bash
        if: steps.detect.outputs.is_rust != 'true'
        run: echo "🟡 Skipping scan - not a Rust project"
