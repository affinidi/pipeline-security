name: Rust Security Scan

on:
  workflow_call:
    inputs:
      repo-path:
        description: 'Path to the repository to scan'
        required: false
        default: '.'
        type: string

    secrets:
      SNYK_SCANNER_TOKEN:
        required: true
      SNYK_SCANNER_REGION:
        required: true

jobs:
  rust-scan:
    name: Rust Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üîç Detect Project Type
        id: detect
        shell: bash
        run: |
          REPO_PATH="${{ inputs.repo-path }}"
          if [ ! -f "${REPO_PATH}/Cargo.toml" ]; then
            echo "::warning::No Cargo.toml found - not a Rust project"
            echo "is_rust=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Project Type : Rust"
          echo "is_rust=true" >> $GITHUB_OUTPUT

      - name: üì¶ Install system libraries
        if: steps.detect.outputs.is_rust == 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pkg-config libdbus-1-dev

      - name: ü¶Ä Set up Rust Toolchain with components
        if: steps.detect.outputs.is_rust == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: ‚ö° Cache Cargo Registry
        id: cache-cargo
        if: steps.detect.outputs.is_rust == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: ‚ö° Cache Target
        id: cache-target
        if: steps.detect.outputs.is_rust == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ inputs.repo-path }}/target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: ‚ö° Cache Cargo Bin
        id: cache-bin
        if: steps.detect.outputs.is_rust == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-v2

      - name: ‚ö° Cache Global NPM Tools
        id: cache-npm
        if: steps.detect.outputs.is_rust == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-npm-tools-v1

      - name: üì¶ Install Rust analysis tools
        if: steps.detect.outputs.is_rust == 'true'
        shell: bash
        run: |
          # Only install if missing
          if ! command -v cargo-cyclonedx >/dev/null 2>&1; then
            cargo install cargo-cyclonedx
          fi
          if ! command -v cargo-audit >/dev/null 2>&1; then
            cargo install cargo-audit
          fi

      - name: üì¶ Install required npm tools if not present
        if: steps.detect.outputs.is_rust == 'true'
        shell: bash
        run: |
          if ! command -v snyk > /dev/null; then
            mkdir -p ~/.npm-global
            npm config set prefix ~/.npm-global
            npm install -g snyk@latest
            echo "$HOME/.npm-global/bin" >> $GITHUB_PATH
          fi

      - name: üì¶ Install yq
        if: steps.detect.outputs.is_rust == 'true'
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: üîê Authentication
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        env:
          SNYK_SCANNER_TOKEN: ${{ secrets.SNYK_SCANNER_TOKEN }}
          SNYK_SCANNER_REGION: ${{ secrets.SNYK_SCANNER_REGION }}
        run: |
          echo "::add-mask::$SNYK_SCANNER_TOKEN"
          echo "::add-mask::$SNYK_SCANNER_REGION"
          snyk config set endpoint="https://api.${SNYK_SCANNER_REGION}.snyk.io" >/dev/null 2>&1
          snyk auth "$SNYK_SCANNER_TOKEN" >/dev/null 2>&1

      - name: üõ°Ô∏è Run Cargo Audit (RustSec)
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          echo "Running cargo audit..."
          if ! cargo audit --json > audit-result.json 2>/dev/null; then
            echo "::warning::‚ö†Ô∏è cargo audit exited with error ‚Äî checking audit validity"
            if [ ! -s audit-result.json ]; then
              echo '{"vulnerabilities":{"list":[],"count":0},"warnings":[]}' > audit-result.json
            fi
          fi

          if ! jq empty audit-result.json 2>/dev/null; then
            echo "::error::‚ùå Invalid Cargo Audit JSON"
            exit 1
          fi

      - name: üîé Snyk Code Test
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          echo "Running Snyk Code Test..."
          SNYK_CODE_EXIT=0
          snyk code test --json > snyk-code-result.json || SNYK_CODE_EXIT=$?

          if [[ "$SNYK_CODE_EXIT" -ne 0 ]] && [ ! -f "snyk-code-result.json" ]; then
            echo '{"issues":[]}' > snyk-code-result.json
          fi

          if ! jq empty snyk-code-result.json 2>/dev/null; then
            echo "::error::‚ùå Invalid Snyk Code JSON"
            exit 1
          fi

      - name: üìä Unified Vulnerability Scan and Check
        if: steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          # Generate SBOM
          if ! cargo cyclonedx --format json > cargo-sbom.json 2>/dev/null; then
            echo "::warning::‚ö†Ô∏è cargo cyclonedx exited with error ‚Äî checking SBOM validity"
            if [ ! -s cargo-sbom.json ]; then
              echo "::error::‚ùå SBOM generation failed completely"
              exit 1
            fi
          fi

          if ! jq empty cargo-sbom.json 2>/dev/null; then
            echo "::error::‚ùå Invalid SBOM JSON"
            exit 1
          fi

          echo "----------------------------------------------------------------------"
          echo "üì¶ Generated SBOM"

          # Run Snyk SBOM test
          SNYK_EXIT=0
          snyk sbom test --experimental --file cargo-sbom.json --org=affinidi --json > sbom-result.json || SNYK_EXIT=$?

          if [[ "$SNYK_EXIT" -ne 0 ]] && [ ! -f "sbom-result.json" ]; then
            echo "::error::‚ùå Snyk scan failed and no results file was generated"
            exit 1
          fi

          echo "----------------------------------------------------------------------"
          echo "‚úì Scanning Finished"

          # Extract ignored CVEs from .snyk file
          POLICY_PATH="${{ inputs.repo-path }}/.snyk"
          IGNORED_CVES_JSON="[]"

          if [ -f "$POLICY_PATH" ]; then
            echo "----------------------------------------------------------------------"
            echo "üóÇ Found .snyk file, extracting ignore list"
            
            # Extract CVE keys as plain list, then sort numerically by year and number
            IGNORED_CVES=$(yq -o=json '.ignore | keys' "$POLICY_PATH" \
              | jq -r '.[]' \
              | sort -t'-' -k2,2n -k3,3n)

            # Normalize to uppercase and prepare JSON array for filtering
            IGNORED_CVES_JSON=$(printf '%s\n' "$IGNORED_CVES" | tr '[:lower:]' '[:upper:]' | jq -R . | jq -s .)

            # Display list
            COUNT=$(echo "$IGNORED_CVES" | wc -l | xargs)
            echo "----------------------------------------------------------------------"
            echo "Ignoring $COUNT CVE(s) (from .snyk):"
            echo ""
            i=1
            while IFS= read -r cve; do
              echo "  $i) $cve"
              i=$((i+1))
            done <<< "$IGNORED_CVES"

          else
            echo "----------------------------------------------------------------------"
            echo "‚ÑπÔ∏è No .snyk file found, proceeding without ignore list"
          fi

          # Combine all results
          jq -s '{cargo_audit: .[0], snyk: .[1], code_test: .[2]}' audit-result.json sbom-result.json snyk-code-result.json > combined-result.json

          # Normalize CVEs in SBOM to uppercase and filter ignored ones
          jq --argjson ignored "$IGNORED_CVES_JSON" '
            .snyk.vulnerabilities |= (if . then map(
              if .identifiers.CVE then
                .identifiers.CVE |= map(ascii_upcase)
              else
                .
              end
            ) | map(select(
              (.identifiers.CVE // []) | all(. as $cve | $ignored | index($cve) | not)
            )) else [] end)
          ' combined-result.json > combined-result-filtered.json

          # Count vulnerabilities by severity
          audit_critical=$(jq '[.cargo_audit.vulnerabilities.list[]? | select(.advisory.severity=="critical")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          audit_high=$(jq '[.cargo_audit.vulnerabilities.list[]? | select(.advisory.severity=="high")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          snyk_critical=$(jq '[.snyk.vulnerabilities? // [] | .[] | select(.severity=="critical")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          snyk_high=$(jq '[.snyk.vulnerabilities? // [] | .[] | select(.severity=="high")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          code_critical=$(jq '[.code_test.issues[]? | select(.severity=="critical")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          code_high=$(jq '[.code_test.issues[]? | select(.severity=="high")] | length' combined-result-filtered.json 2>/dev/null || echo 0)
          
          total_critical=$((audit_critical + snyk_critical + code_critical))
          total_high=$((audit_high + snyk_high + code_high))
          unknown=$(jq '[.snyk.vulnerabilities? // [] | .[] | select(.severity=="unknown")] | length' combined-result-filtered.json 2>/dev/null || echo 0)

          if [[ $total_critical -gt 0 || $total_high -gt 0 ]]; then
            echo "----------------------------------------------------------------------"
            echo "                        VULNERABILITY DETAILS          "
            echo "----------------------------------------------------------------------"
            
            # Display Cargo Audit vulnerabilities
            if [[ $audit_critical -gt 0 || $audit_high -gt 0 ]]; then
              echo "ü¶Ä CARGO AUDIT (RustSec) FINDINGS:"
              jq -r '
                (.cargo_audit.vulnerabilities.list // [])
                | map(select(.advisory.severity == "critical" or .advisory.severity == "high"))
                | .[]
                | "\(.advisory.severity | ascii_upcase) | \(.package.name)@\(.package.version)\n" +
                  "üìõ Title: \(.advisory.title)\n" +
                  "üîó CVE: \(.advisory.aliases[0] // "None")\n" +
                  "‚ö†Ô∏è CVSS: \(.advisory.cvss // "?") \n" +
                  "üí° Fix: \(if .versions.patched then "Upgrade to: \(.versions.patched | join(", "))" else "See: \(.advisory.url // "No fix info")" end)\n" +
                  "---"
              ' combined-result-filtered.json
            fi

            # Display Snyk SBOM vulnerabilities  
            if [[ $snyk_critical -gt 0 || $snyk_high -gt 0 ]]; then
              echo "üîç SNYK SBOM FINDINGS:"
              jq -r '
                (.snyk.vulnerabilities // [])
                | map(select(.severity == "critical" or .severity == "high"))
                | .[]
                | "\(.severity | ascii_upcase) | \(.packageName)@\(.version)\n" +
                  "üìõ Title: \(.title)\n" +
                  "üîó CVE: \(.identifiers.CVE[0] // "None")\n" +
                  "‚ö†Ô∏è CVSS: \(.cvssScore // "?") (\(.CVSSv3 // "No vector"))\n" +
                  "üí° Fix: \(if .semver.patched then "Upgrade to \(.semver.patched[0])" 
                        elif .semver.unaffected then "Use version: \(.semver.unaffected[0])" 
                        else "See: \(.url // "No fix info")" end)\n" +
                  "---"
              ' combined-result-filtered.json
            fi

            # Display Snyk Code Test issues
            if [[ $code_critical -gt 0 || $code_high -gt 0 ]]; then
              echo "üîé SNYK CODE TEST FINDINGS:"
              jq -r '
                (.code_test.issues // [])
                | map(select(.severity == "critical" or .severity == "high"))
                | .[]
                | "\(.severity | ascii_upcase) | \(.id)\n" +
                  "üìõ Title: \(.title)\n" +
                  "üìç File: \(.filePath):\(.lineNumber // "?")\n" +
                  "üí° Fix: \(.fixedIn // "Manual review required")\n" +
                  "---"
              ' combined-result-filtered.json
            fi

            echo "::error::‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "::error::‚îÇ CRITICAL SECURITY ISSUES DETECTED                   "
            echo "::error::‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            echo "::error::‚îÇ üü£ Critical vulnerabilities: $total_critical              "
            echo "::error::‚îÇ üî¥ High vulnerabilities: $total_high                      "
            echo "::error::‚îÇ                                                     "
            echo "::error::‚îÇ Review the detailed report above and either:        "
            echo "::error::‚îÇ                                                     "
            echo "::error::‚îÇ 1. Fix Vulnerabilities OR                           "
            echo "::error::‚îÇ 2. Consult Security incase of false positives / risk acceptance, update .snyk policy file accordingly"
            echo "::error::‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            exit 1

          elif [[ "$unknown" -gt 0 ]]; then
            echo "::warning::‚ö™ Scan completed with $unknown unknown severity vulnerabilities"
          else
            echo "----------------------------------------------------------------------"
            echo "‚úÖ All good, no critical or high vulnerabilities found. Good job! üéâ"
            echo "----------------------------------------------------------------------"
          fi

      - name: üßπ Cleanup
        if: always() && steps.detect.outputs.is_rust == 'true'
        working-directory: ${{ inputs.repo-path }}
        shell: bash
        run: |
          rm -f cargo-sbom.json sbom-result.json audit-result.json combined-result.json combined-result-filtered.json snyk-code-result.json

      - name: ‚ÑπÔ∏è Skip if not a Rust project
        if: steps.detect.outputs.is_rust != 'true'
        shell: bash
        run: echo "üü° Skipping scan - not a Rust project"