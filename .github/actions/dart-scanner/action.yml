name: 'Dart/Flutter Security Scan'
description: 'Run scan for Dart/Flutter projects only'
inputs:
  repo-path:
    description: 'Path to the repository to scan'
    required: false
    default: '.'
  DART_SCANNER_TOKEN:
    description: 'Authentication token'
    required: true
  DART_SCANNER_REGION:
    description: 'Scanner Region token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Detect Project Type
      id: detect
      shell: bash
      run: |
        REPO_PATH="${{ inputs.repo-path }}"

        if [ ! -f "${REPO_PATH}/pubspec.yaml" ]; then
          echo "::warning::No pubspec.yaml found - not a Dart/Flutter project"
          echo "is_dart=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        if grep -q "sdk: flutter" "${REPO_PATH}/pubspec.yaml" || grep -q "flutter:" "${REPO_PATH}/pubspec.yaml"; then
          echo "Project Type : Flutter"
          echo "is_flutter=true" >> $GITHUB_OUTPUT
          echo "is_dart=true" >> $GITHUB_OUTPUT
        else
          echo "Project Type : Dart"
          echo "is_flutter=false" >> $GITHUB_OUTPUT
          echo "is_dart=true" >> $GITHUB_OUTPUT
        fi

    - name: 🧰 Set up Flutter SDK
      if: steps.detect.outputs.is_dart == 'true'
      uses: subosito/flutter-action@v2
      with:
        channel: stable

    - name: 📦 Install required tools
      if: steps.detect.outputs.is_dart == 'true'
      working-directory: ${{ inputs.repo-path }}
      shell: bash
      run: |
        npm install -g snyk@latest @cyclonedx/cdxgen@latest >/dev/null 2>&1

    - name: 🔐 Authenticating Tool
      if: steps.detect.outputs.is_dart == 'true'
      working-directory: ${{ inputs.repo-path }}
      shell: bash
      env:
        DART_SCANNER_TOKEN: ${{ inputs.DART_SCANNER_TOKEN }}
        DART_SCANNER_REGION: ${{ inputs.DART_SCANNER_REGION }}
      run: |
        echo "::add-mask::$DART_SCANNER_TOKEN"
        echo "::add-mask::$DART_SCANNER_REGION"

        snyk config set endpoint="https://api.${DART_SCANNER_REGION}.snyk.io" >/dev/null 2>&1

        snyk auth "$DART_SCANNER_TOKEN" >/dev/null 2>&1

    - name: 📦 Resolve dependencies
      shell: bash
      if: steps.detect.outputs.is_dart == 'true'
      working-directory: ${{ inputs.repo-path }}
      run: |
        dart pub get >/dev/null 2>&1

    - name: 📊 Scan, Fail if Critical or High vulnerabilities found !!!
      if: steps.detect.outputs.is_dart == 'true'
      working-directory: ${{ inputs.repo-path }}
      shell: bash
      run: |
        cdxgen -t pub -o pub-sbom.json >/dev/null 2>&1

        if ! snyk sbom test --experimental --file pub-sbom.json --org=my-org-slug --json > sbom-result.json 2>&1; then
          echo "⚠️ Snyk test exited with a non-zero status, continuing to parse results..."
        fi

        if jq -e 'has("error")' sbom-result.json; then
          echo "::error::Scan failed: $(jq -r '.error' sbom-result.json)"
          exit 1
        fi

        critical=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "critical")] | length' sbom-result.json)
        high=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "high")] | length' sbom-result.json)
        unknown=$(jq '[.vulnerabilities? // [] | .[] | select(.severity? == "unknown")] | length' sbom-result.json)

        echo "::group::📊 Vulnerability Summary"

        jq -er '
          if ((.vulnerabilities? // []) | length) == 0 then
            empty
          else
            .vulnerabilities
            | group_by(.severity?)[]
            | {
                severity: .[0].severity,
                issues: [.[] | {
                  id: .id?,
                  title: .title?,
                  pkg: .packageName?,
                  version: .version?
                }]
              }
            | (
                if .severity == "critical" then "\n🟣 CRITICAL SEVERITY"
                elif .severity == "high" then "\n🔴 HIGH SEVERITY"
                elif .severity == "medium" then "\n🟠 MEDIUM SEVERITY"
                elif .severity == "low" then "\n🟡 LOW SEVERITY"
                else "\n⚪ UNKNOWN SEVERITY"
                end
              ) + "\n" +
              (
                .issues[]
                | "\n- \(.title) [\(.id)]\n  📦 Package: \(.pkg)@\(.version)"
              )
          end
        ' sbom-result.json || echo "✅ No vulnerabilities detected, Great job! 🎉"


        echo "::endgroup::"

        if [[ "$critical" -gt 0 || "$high" -gt 0 ]]; then
          echo "::error::❌ Scan failed due to high-severity issues:"
          echo "  🟣 Critical vulnerabilities: $critical"
          echo "  🔴 High vulnerabilities: $high"
          exit 1
        elif [[ "$unknown" -gt 0 ]]; then
          echo "::warning::⚪ Scan completed with $unknown unknown severity vulnerabilities"
        else
          echo "✅ No Critical (🟣) or High (🔴) vulnerabilities found. Great job! 🎉"
        fi


    - name: 🧹 Cleanup
      shell: bash
      if: always() && steps.detect.outputs.is_dart == 'true'
      working-directory: ${{ inputs.repo-path }}
      run: |
        rm -f pub-sbom.json sbom-result.json

    - name: ℹ️ Skip if not a Dart/Flutter project
      shell: bash
      if: steps.detect.outputs.is_dart != 'true'
      run: echo "🟡 Skipping scan - not a Dart/Flutter project"